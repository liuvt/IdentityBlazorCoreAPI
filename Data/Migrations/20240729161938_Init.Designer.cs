// <auto-generated />
using System;
using IdentityBlazorCoreAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityBlazorCoreAPI.Data.Migrations
{
    [DbContext(typeof(IdentityBlazorCoreAPIDbContext))]
    [Migration("20240729161938_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("IdentityBlazorCoreAPI.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "OWNER-AUGCENTER-2023",
                            AccessFailedCount = 0,
                            Address = "",
                            Biography = "",
                            ConcurrencyStamp = "966010ad-773e-442f-9628-5f55c549d618",
                            Email = "owner@augcenter.com",
                            EmailConfirmed = false,
                            FirstName = "Aug",
                            Gender = "",
                            LastName = "Center",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@AUGCENTER.COM",
                            NormalizedUserName = "OWNER@AUGCENTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAshLP9SzwD3ZG1K5pYO4aOJsNKEIVSCGjnZrI7if1Nb64jsT9hc3+mSm0i/ru5XBA==",
                            PhoneNumber = "0868752251",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f32e832b-bc31-4ae7-bd5f-a9fdfaa58719",
                            TwoFactorEnabled = false,
                            UserName = "owner@augcenter.com"
                        },
                        new
                        {
                            Id = "ADMIN-AUGCENTER-2023",
                            AccessFailedCount = 0,
                            Address = "",
                            Biography = "",
                            ConcurrencyStamp = "38fa488d-2d53-41a4-910e-5444e4823e93",
                            Email = "administructor@augcenter.com",
                            EmailConfirmed = false,
                            FirstName = "Aug",
                            Gender = "",
                            LastName = "Center",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRUCTOR@AUGCENTER.COM",
                            NormalizedUserName = "ADMINISTRUCTOR@AUGCENTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKqJQ6Q7c9y/0GYRcvUteGhHkSxiekVWyz8fT2ZhkIuvMD4Xdn8y5nhAWA8/yUnsDA==",
                            PhoneNumber = "0868752251",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0751326c-80b0-4fbf-b644-e7f03441842a",
                            TwoFactorEnabled = false,
                            UserName = "administructor@augcenter.com"
                        },
                        new
                        {
                            Id = "SELLER-AUGCENTER-2023",
                            AccessFailedCount = 0,
                            Address = "",
                            Biography = "",
                            ConcurrencyStamp = "28d07aaa-5616-482d-8042-957adb82e8f4",
                            Email = "seller@augcenter.com",
                            EmailConfirmed = false,
                            FirstName = "Aug",
                            Gender = "",
                            LastName = "Center",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@AUGCENTER.COM",
                            NormalizedUserName = "SELLER@AUGCENTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGuip/BhRb/ci40Gw4X6wJoGH5kkivyT2rwoYfEpAPp/e5SdkMpSxgDEBc3P4Spn1Q==",
                            PhoneNumber = "0868752251",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66ca5f1e-b691-4c21-95b5-ff9d43d277d2",
                            TwoFactorEnabled = false,
                            UserName = "seller@augcenter.com"
                        },
                        new
                        {
                            Id = "BUYER-AUGCENTER-2023",
                            AccessFailedCount = 0,
                            Address = "",
                            Biography = "",
                            ConcurrencyStamp = "1cbedc58-3a07-4153-9630-c1f6611ed9ae",
                            Email = "buyer@augcenter.com",
                            EmailConfirmed = false,
                            FirstName = "Aug",
                            Gender = "",
                            LastName = "Center",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER@AUGCENTER.COM",
                            NormalizedUserName = "BUYER@AUGCENTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMX13zn35Xo3bsfnQuYLxhWkLTA8gbBiRgsvnFejmTZ4ijhR0IofhAnEC/UaIxGZlg==",
                            PhoneNumber = "0868752251",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54b7590c-928a-4ba5-b75a-e34c27d9d89d",
                            TwoFactorEnabled = false,
                            UserName = "buyer@augcenter.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "29/07/2024 11:19:36 CH",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "29/07/2024 11:19:36 CH",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRUCTOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "29/07/2024 11:19:36 CH",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "29/07/2024 11:19:36 CH",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "29/07/2024 11:19:36 CH",
                            Name = "Buyer",
                            NormalizedName = "BUYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "OWNER-AUGCENTER-2023",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "ADMIN-AUGCENTER-2023",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "SELLER-AUGCENTER-2023",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "BUYER-AUGCENTER-2023",
                            RoleId = "5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityBlazorCoreAPI.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityBlazorCoreAPI.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityBlazorCoreAPI.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityBlazorCoreAPI.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
